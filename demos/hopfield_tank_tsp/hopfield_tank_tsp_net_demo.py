import netomaton as ntm
import numpy as np


if __name__ == "__main__":

    """
    ((A,   B,   C,   D,   n,  dt,    ts),   avg, # converged/10)
    ((300, 300, 100, 300, 10, 0.001, 1000), nan, 0.0)
    ((300, 300, 100, 300, 10, 0.001, 2000), nan, 0.0)
    ((300, 300, 100, 300, 10, 0.0001, 1000), 2.8023140391999837, 0.1)
    ((300, 300, 100, 300, 10, 0.0001, 2000), nan, 0.0)
    ((300, 300, 100, 300, 10, 1e-05, 1000), 3.121340371410252, 0.2)
    ((300, 300, 100, 300, 10, 1e-05, 2000), 2.8762148084940757, 0.2)
    ((300, 300, 100, 300, 10, 1e-06, 1000), 3.560592347121872, 0.2)
    ((300, 300, 100, 300, 10, 1e-06, 2000), 2.945658451607528, 0.3)
    ((300, 300, 100, 300, 11, 0.001, 1000), 3.402643232728481, 0.2)
    ((300, 300, 100, 300, 11, 0.001, 2000), 3.246188984491981, 0.1)
    ((300, 300, 100, 300, 11, 0.0001, 1000), 3.8241480374781585, 0.2)
    ((300, 300, 100, 300, 11, 0.0001, 2000), 3.2117222187763397, 0.2)
    ((300, 300, 100, 300, 11, 1e-05, 1000), 3.3177454770860453, 0.3)
    ((300, 300, 100, 300, 11, 1e-05, 2000), 3.062696377730515, 0.2)
    ((300, 300, 100, 300, 11, 1e-06, 1000), 2.6481521216955044, 0.1)
    ((300, 300, 100, 300, 11, 1e-06, 2000), 3.1597092983969426, 0.4)
    ((300, 300, 100, 300, 12, 0.001, 1000), 3.2576946109414733, 0.5)
    ((300, 300, 100, 300, 12, 0.001, 2000), 3.906846697175422, 0.2)
    ((300, 300, 100, 300, 12, 0.0001, 1000), 3.276949834315739, 0.3)
    ((300, 300, 100, 300, 12, 0.0001, 2000), 3.380567122105691, 0.4)
    ((300, 300, 100, 300, 12, 1e-05, 1000), 2.9605078829924527, 0.7)
    ((300, 300, 100, 300, 12, 1e-05, 2000), 3.4043493440702073, 0.6)
    ((300, 300, 100, 300, 12, 1e-06, 1000), 3.052703022993445, 0.3)
    ((300, 300, 100, 300, 12, 1e-06, 2000), 3.272174355524656, 0.5)
    ((300, 300, 100, 300, 13, 0.001, 1000), 3.275107176884986, 0.5)
    ((300, 300, 100, 300, 13, 0.001, 2000), 3.2885821958261436, 0.5)
    ((300, 300, 100, 300, 13, 0.0001, 1000), 3.683557972395499, 0.5)
    ((300, 300, 100, 300, 13, 0.0001, 2000), 3.113598467328538, 0.4)
    ((300, 300, 100, 300, 13, 1e-05, 1000), 3.2561773184185028, 0.7)
    ((300, 300, 100, 300, 13, 1e-05, 2000), 3.4769404144906635, 0.7)
    ((300, 300, 100, 300, 13, 1e-06, 1000), 3.0179144747075686, 0.4)
    ((300, 300, 100, 300, 13, 1e-06, 2000), 3.4126537307972784, 0.5)
    ((300, 300, 100, 300, 14, 0.001, 1000), 3.437676415485695, 0.2)
    ((300, 300, 100, 300, 14, 0.001, 2000), 3.499623957226992, 0.1)
    ((300, 300, 100, 300, 14, 0.0001, 1000), 3.1567013569336715, 0.3)
    ((300, 300, 100, 300, 14, 0.0001, 2000), 3.046441959367493, 0.3)
    ((300, 300, 100, 300, 14, 1e-05, 1000), 2.809573846304282, 0.3)
    ((300, 300, 100, 300, 14, 1e-05, 2000), 3.14516685306125, 0.4)
    ((300, 300, 100, 300, 14, 1e-06, 1000), 2.886682499789315, 0.3)
    ((400, 400, 150, 400, 12, 1e-05, 1000), 3.1818680173024543, 0.8)
    ((400, 400, 150, 500, 12, 1e-05, 1000), 3.113594542321173, 0.2)
    ((400, 400, 150, 600, 12, 1e-05, 1000), 3.306279453352643, 0.1)
    ((400, 400, 200, 400, 12, 1e-05, 1000), 3.458805106594069, 0.6)
    ((400, 400, 200, 500, 12, 1e-05, 1000), 2.7366032589381626, 0.3)
    ((400, 400, 200, 600, 12, 1e-05, 1000), nan, 0.0)
    ((400, 400, 250, 400, 12, 1e-05, 1000), 2.9161837579127963, 0.4)
    ((400, 400, 250, 500, 12, 1e-05, 1000), nan, 0.0)
    ((400, 400, 250, 600, 12, 1e-05, 1000), 2.9947486129986123, 0.1)
    ((400, 500, 150, 400, 12, 1e-05, 1000), 3.237371741048473, 0.7)
    ((400, 400, 100, 200, 12, 1e-05, 1000), 3.7665853133833345, 1.0)
    ((400, 400, 100, 300, 12, 1e-05, 1000), 3.7691649644138905, 0.5)
    ((400, 400, 100, 400, 12, 1e-05, 1000), 2.9061342334494755, 0.2)
    ((400, 400, 150, 200, 12, 1e-05, 1000), 3.862631417203702, 1.0)
    ((400, 400, 150, 300, 12, 1e-05, 1000), 3.4871630345473705, 1.0)
    ((400, 400, 150, 400, 12, 1e-05, 1000), 3.3066720278368438, 0.4)
    ((400, 400, 200, 200, 12, 1e-05, 1000), 3.4923112334087953, 0.8)
    ((400, 400, 200, 300, 12, 1e-05, 1000), 3.1875667019917167, 0.8)
    ((400, 400, 200, 400, 12, 1e-05, 1000), 3.034144847851962, 0.4)
    ((400, 500, 100, 200, 12, 1e-05, 1000), 3.858966019857143, 1.0)
    ((400, 500, 100, 300, 12, 1e-05, 1000), 3.171198863392567, 0.4)
    ((400, 500, 100, 400, 12, 1e-05, 1000), 2.7854340048547543, 0.5)
    ((400, 500, 150, 200, 12, 1e-05, 1000), 4.17874425421667, 1.0)
    ((400, 500, 150, 300, 12, 1e-05, 1000), 3.802615939509921, 0.9)
    ((400, 500, 150, 400, 12, 1e-05, 1000), 3.6235680029024215, 0.7)
    ((400, 500, 200, 200, 12, 1e-05, 1000), 3.9452566645475198, 0.8)
    ((400, 500, 200, 300, 12, 1e-05, 1000), 3.4427891914071593, 0.8)
    ((400, 500, 200, 400, 12, 1e-05, 1000), 3.3689991317268637, 0.5)
    ((500, 400, 100, 200, 12, 1e-05, 1000), 4.469843546269357, 1.0)
    ((500, 400, 100, 300, 12, 1e-05, 1000), 3.151336727656711, 0.5)
    ((500, 400, 100, 400, 12, 1e-05, 1000), 3.2142284527288814, 0.4)
    ((500, 400, 150, 200, 12, 1e-05, 1000), 4.164233950964799, 1.0)
    ((500, 400, 150, 300, 12, 1e-05, 1000), 3.4504090717757534, 0.8)
    ((500, 400, 150, 400, 12, 1e-05, 1000), 3.180663111313227, 0.5)
    ((500, 400, 200, 200, 12, 1e-05, 1000), 4.0490751469476685, 0.8)
    ((500, 400, 200, 300, 12, 1e-05, 1000), 3.632167925525173, 0.8)
    ((500, 400, 200, 400, 12, 1e-05, 1000), 3.504588076208679, 0.9)
    ((500, 500, 100, 200, 12, 1e-05, 1000), 4.052135588722495, 1.0)
    ((500, 500, 100, 300, 12, 1e-05, 1000), 3.6659188569811416, 0.8)
    ((500, 500, 100, 400, 12, 1e-05, 1000), 3.065857906118921, 0.4)
    ((500, 500, 150, 200, 12, 1e-05, 1000), 3.7839335217604484, 1.0)
    ((500, 500, 150, 300, 12, 1e-05, 1000), 3.4807220504123797, 1.0)
    ((500, 500, 150, 400, 12, 1e-05, 1000), 3.724991255725718, 0.8)
    ((500, 500, 200, 200, 12, 1e-05, 1000), 4.048174239113356, 1.0)
    ((500, 500, 200, 300, 12, 1e-05, 1000), 3.7377917672465926, 1.0)
    ((500, 500, 200, 400, 12, 1e-05, 1000), 3.748154256205247, 0.7)
    ((500, 500, 200, 550, 12, 1e-06, 2000), 3.2150445870440123, 0.6)
    ((500, 500, 200, 500, 15, 0.001, 1000), 2.67325154944775, 0.2)
    ((500, 500, 200, 500, 15, 1e-06, 1000), 2.850167533066557, 0.3)
    ((500, 500, 200, 500, 12, 1e-05, 1000), 3.193179151285661, 0.7)
    ((500, 500, 200, 500, 15, 1e-05, 1000), 2.6899886185832442, 0.1)
    """

    points = [(0, 1), (0.23, 0.5), (0.6, 0.77), (0.33, 0.88), (0.25, 0.99), (0.55, 0.25), (0.67, 0.78),
              (0.12, 0.35), (0.19, 0.89), (0.40, 0.23)]

    # A, B, C, D, n, dt, timesteps = 500, 500, 200, 500, 15, 0.001, 1000  # avg. 2.67325154944775, 20% convergence
    A, B, C, D, n, dt, timesteps = 300, 300, 100, 300, 12, 1e-05, 1000  # avg. 2.9605078829924527, 70% convergence
    # A, B, C, D, n, dt, timesteps = 400, 400, 150, 400, 12, 1e-05, 1000  # avg. 3.1818680173024543, 80% convergence
    # A, B, C, D, n, dt, timesteps = 500, 500, 150, 300, 12, 1e-05, 1000  # avg. 3.4807220504123797, 100% convergence

    tsp_net = ntm.HopfieldTankTSPNet(points, dt=dt, A=A, B=B, C=C, D=D, n=n)

    adjacencies = tsp_net.adjacencies

    # -0.022 was chosen so that the sum of V for all cells is 10; some noise is added to break the symmetry
    initial_conditions = [-0.022 + np.random.uniform(-0.1*0.02, 0.1*0.02) for _ in range(len(adjacencies))]

    activities, _ = ntm.evolve(initial_conditions, adjacencies, tsp_net.activity_rule, timesteps=timesteps, parallel=True)

    ntm.animate(activities, shape=(10, 10))

    permutation_matrix = tsp_net.get_permutation_matrix(activities)
    print(permutation_matrix)

    G, pos, length = tsp_net.get_tour_graph(points, permutation_matrix)

    print(length)

    tsp_net.plot_tour(G, pos)
